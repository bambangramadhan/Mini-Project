{"ast":null,"code":"import * as types from '../constants/ActionTypes';\nimport request from 'superagent';\nvar API_URL = 'https://api.themoviedb.org/3/';\nvar API_KEY = '5934c9098581e262e81b72718dbc9b0a';\n\nfunction getMoviesFailure() {\n  return {\n    type: types.MOVIES_FAILURE\n  };\n}\n\nfunction getMoviesSuccess(movies) {\n  return {\n    type: types.MOVIES_SUCCESS,\n    movies: movies\n  };\n}\n\nexport function getMovies(page) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"movie/now_playing?api_key=\").concat(API_KEY, \"&region=ID&page=\").concat(page)).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(getMoviesFailure());\n      } else {\n        dispatch(getMoviesSuccess(res.body));\n      }\n    });\n  };\n}\n\nfunction searchMoviesFailure() {\n  return {\n    type: types.SEARCH_FAILURE\n  };\n}\n\nfunction searchMoviesSuccess(id) {\n  return {\n    type: types.SEARCH_SUCCESS,\n    id: id\n  };\n}\n\nexport function searchMovies(id) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"find/\").concat(id, \"?api_key=\").concat(API_KEY, \"&language=en-US&external_source=imdb_id\")).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(searchMoviesFailure());\n      } else {\n        dispatch(searchMoviesSuccess(res.body));\n      }\n    });\n  };\n}\n\nfunction getMovieFailure() {\n  return {\n    type: types.MOVIE_FAILURE\n  };\n}\n\nfunction getMovieSuccess(movie) {\n  return {\n    type: types.MOVIE_SUCCESS,\n    movie: movie\n  };\n}\n\nexport function getMovie(id) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"?api_key=\").concat(API_KEY, \"&language=en-US\")).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(getMovieFailure());\n      } else {\n        dispatch(getMovieSuccess(res.body));\n      }\n    });\n  };\n}\n\nfunction getCastsFailure() {\n  return {\n    type: types.CASTS_FAILURE\n  };\n}\n\nfunction getCastsSuccess(casts) {\n  return {\n    type: types.CASTS_SUCCESS,\n    casts: casts\n  };\n}\n\nexport function getCasts(id) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/credits?api_key=\").concat(API_KEY)).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(getCastsFailure());\n      } else {\n        dispatch(getCastsSuccess(res.body.cast));\n      }\n    });\n  };\n}\n\nfunction getRecommendedFailure() {\n  return {\n    type: types.RECOMMENDED_FAILURE\n  };\n}\n\nfunction getRecommendedSuccess(recommended) {\n  return {\n    type: types.RECOMMENDED_SUCCESS,\n    recommended: recommended\n  };\n}\n\nexport function getRecommended(id) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/recommendations?api_key=\").concat(API_KEY)).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(getRecommendedFailure());\n      } else {\n        dispatch(getRecommendedSuccess(res.body.results));\n      }\n    });\n  };\n}\n\nfunction getRelatedFailure() {\n  return {\n    type: types.RELATED_FAILURE\n  };\n}\n\nfunction getRelatedSuccess(related) {\n  return {\n    type: types.RELATED_SUCCESS,\n    related: related\n  };\n}\n\nexport function getRelated(id) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/similar?api_key=\").concat(API_KEY)).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(getRelatedFailure());\n      } else {\n        dispatch(getRelatedSuccess(res.body.results));\n      }\n    });\n  };\n}\n\nfunction getTrailersFailure() {\n  return {\n    type: types.TRAILERS_FAILURE\n  };\n}\n\nfunction getTrailersSuccess(trailer) {\n  return {\n    type: types.TRAILERS_SUCCESS,\n    trailer: trailer\n  };\n}\n\nexport function getTrailers(id) {\n  return function (dispatch) {\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/videos?api_key=\").concat(API_KEY, \"&language=en-US\")).set('Accept', 'application/json').end(function (err, res) {\n      if (err) {\n        console.error(err);\n        dispatch(getTrailersFailure());\n      } else {\n        dispatch(getTrailersSuccess(res.body.results));\n      }\n    });\n  };\n}\nexport function balanceFetchDataSuccess(balance, purchasedlist) {\n  return {\n    type: types.BALANCE_FETCH_DATA_SUCCESS,\n    balance: balance,\n    purchasedlist: purchasedlist\n  };\n}\nexport function balancePurchase(remain, purchasedlist) {\n  return function (dispatch) {\n    dispatch(balanceFetchDataSuccess(remain, purchasedlist));\n  };\n}\nexport function initBalance() {\n  var balance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var purchasedlist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (balance === null || typeof balance === 'undefined') {\n    balance = 100000;\n  }\n\n  if (purchasedlist === null || typeof purchasedlist === 'undefined') {\n    purchasedlist = [];\n  }\n\n  return function (dispatch) {\n    dispatch(balanceFetchDataSuccess(balance, purchasedlist));\n  };\n}","map":{"version":3,"sources":["/home/bambang/Desktop/Mini-Project/src/actions/index.js"],"names":["types","request","API_URL","API_KEY","getMoviesFailure","type","MOVIES_FAILURE","getMoviesSuccess","movies","MOVIES_SUCCESS","getMovies","page","dispatch","get","set","end","err","res","console","error","body","searchMoviesFailure","SEARCH_FAILURE","searchMoviesSuccess","id","SEARCH_SUCCESS","searchMovies","getMovieFailure","MOVIE_FAILURE","getMovieSuccess","movie","MOVIE_SUCCESS","getMovie","getCastsFailure","CASTS_FAILURE","getCastsSuccess","casts","CASTS_SUCCESS","getCasts","cast","getRecommendedFailure","RECOMMENDED_FAILURE","getRecommendedSuccess","recommended","RECOMMENDED_SUCCESS","getRecommended","results","getRelatedFailure","RELATED_FAILURE","getRelatedSuccess","related","RELATED_SUCCESS","getRelated","getTrailersFailure","TRAILERS_FAILURE","getTrailersSuccess","trailer","TRAILERS_SUCCESS","getTrailers","balanceFetchDataSuccess","balance","purchasedlist","BALANCE_FETCH_DATA_SUCCESS","balancePurchase","remain","initBalance"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,IAAMC,OAAO,GAAG,+BAAhB;AACA,IAAMC,OAAO,GAAG,kCAAhB;;AAEA,SAASC,gBAAT,GAA2B;AACzB,SAAO;AAACC,IAAAA,IAAI,EAAEL,KAAK,CAACM;AAAb,GAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,MAA1B,EAAiC;AAC/B,SAAO;AAACH,IAAAA,IAAI,EAAEL,KAAK,CAACS,cAAb;AAA6BD,IAAAA,MAAM,EAANA;AAA7B,GAAP;AACD;;AAED,OAAO,SAASE,SAAT,CAAmBC,IAAnB,EAAwB;AAC7B,SAAO,UAAAC,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,uCACqCC,OADrC,6BAC+DQ,IAD/D,GAENG,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACD,OAHD,MAGK;AACHQ,QAAAA,QAAQ,CAACL,gBAAgB,CAACU,GAAG,CAACG,IAAL,CAAjB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;;AAED,SAASC,mBAAT,GAA8B;AAC5B,SAAO;AAAChB,IAAAA,IAAI,EAAEL,KAAK,CAACsB;AAAb,GAAP;AACD;;AAED,SAASC,mBAAT,CAA6BC,EAA7B,EAAgC;AAC9B,SAAO;AAACnB,IAAAA,IAAI,EAAEL,KAAK,CAACyB,cAAb;AAA6BD,IAAAA,EAAE,EAAFA;AAA7B,GAAP;AACD;;AAED,OAAO,SAASE,YAAT,CAAsBF,EAAtB,EAAyB;AAC9B,SAAO,UAAAZ,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,kBACgBsB,EADhB,sBAC8BrB,OAD9B,8CAENW,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAACS,mBAAmB,EAApB,CAAR;AACD,OAHD,MAGK;AACHT,QAAAA,QAAQ,CAACW,mBAAmB,CAACN,GAAG,CAACG,IAAL,CAApB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;;AAED,SAASO,eAAT,GAA0B;AACxB,SAAO;AAACtB,IAAAA,IAAI,EAAEL,KAAK,CAAC4B;AAAb,GAAP;AACD;;AAED,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC7B,SAAO;AAACzB,IAAAA,IAAI,EAAEL,KAAK,CAAC+B,aAAb;AAA4BD,IAAAA,KAAK,EAALA;AAA5B,GAAP;AACD;;AAED,OAAO,SAASE,QAAT,CAAkBR,EAAlB,EAAqB;AAC1B,SAAO,UAAAZ,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,mBACiBsB,EADjB,sBAC+BrB,OAD/B,sBAENW,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAACe,eAAe,EAAhB,CAAR;AACD,OAHD,MAGK;AACHf,QAAAA,QAAQ,CAACiB,eAAe,CAACZ,GAAG,CAACG,IAAL,CAAhB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;;AAED,SAASa,eAAT,GAA0B;AACxB,SAAO;AAAC5B,IAAAA,IAAI,EAAEL,KAAK,CAACkC;AAAb,GAAP;AACD;;AAED,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC7B,SAAO;AAAC/B,IAAAA,IAAI,EAAEL,KAAK,CAACqC,aAAb;AAA4BD,IAAAA,KAAK,EAALA;AAA5B,GAAP;AACD;;AAED,OAAO,SAASE,QAAT,CAAkBd,EAAlB,EAAqB;AAC1B,SAAO,UAAAZ,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,mBACiBsB,EADjB,8BACuCrB,OADvC,GAENW,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAACqB,eAAe,EAAhB,CAAR;AACD,OAHD,MAGK;AACHrB,QAAAA,QAAQ,CAACuB,eAAe,CAAClB,GAAG,CAACG,IAAJ,CAASmB,IAAV,CAAhB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;;AAED,SAASC,qBAAT,GAAgC;AAC9B,SAAO;AAACnC,IAAAA,IAAI,EAAEL,KAAK,CAACyC;AAAb,GAAP;AACD;;AAED,SAASC,qBAAT,CAA+BC,WAA/B,EAA2C;AACzC,SAAO;AAACtC,IAAAA,IAAI,EAAEL,KAAK,CAAC4C,mBAAb;AAAkCD,IAAAA,WAAW,EAAXA;AAAlC,GAAP;AACD;;AAED,OAAO,SAASE,cAAT,CAAwBrB,EAAxB,EAA2B;AAChC,SAAO,UAAAZ,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,mBACiBsB,EADjB,sCAC+CrB,OAD/C,GAENW,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAAC4B,qBAAqB,EAAtB,CAAR;AACD,OAHD,MAGK;AACH5B,QAAAA,QAAQ,CAAC8B,qBAAqB,CAACzB,GAAG,CAACG,IAAJ,CAAS0B,OAAV,CAAtB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;;AAED,SAASC,iBAAT,GAA4B;AAC1B,SAAO;AAAC1C,IAAAA,IAAI,EAAEL,KAAK,CAACgD;AAAb,GAAP;AACD;;AAED,SAASC,iBAAT,CAA2BC,OAA3B,EAAmC;AACjC,SAAO;AAAC7C,IAAAA,IAAI,EAAEL,KAAK,CAACmD,eAAb;AAA8BD,IAAAA,OAAO,EAAPA;AAA9B,GAAP;AACD;;AAED,OAAO,SAASE,UAAT,CAAoB5B,EAApB,EAAuB;AAC5B,SAAO,UAAAZ,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,mBACiBsB,EADjB,8BACuCrB,OADvC,GAENW,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAACmC,iBAAiB,EAAlB,CAAR;AACD,OAHD,MAGK;AACHnC,QAAAA,QAAQ,CAACqC,iBAAiB,CAAChC,GAAG,CAACG,IAAJ,CAAS0B,OAAV,CAAlB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;;AAED,SAASO,kBAAT,GAA6B;AAC3B,SAAO;AAAChD,IAAAA,IAAI,EAAEL,KAAK,CAACsD;AAAb,GAAP;AACD;;AAED,SAASC,kBAAT,CAA4BC,OAA5B,EAAoC;AAClC,SAAO;AAACnD,IAAAA,IAAI,EAAEL,KAAK,CAACyD,gBAAb;AAA+BD,IAAAA,OAAO,EAAPA;AAA/B,GAAP;AACD;;AAED,OAAO,SAASE,WAAT,CAAqBlC,EAArB,EAAwB;AAC7B,SAAO,UAAAZ,QAAQ,EAAI;AACjB,WAAOX,OAAO,CACbY,GADM,WACCX,OADD,mBACiBsB,EADjB,6BACsCrB,OADtC,sBAENW,GAFM,CAEF,QAFE,EAEQ,kBAFR,EAGNC,GAHM,CAGF,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAJ,QAAAA,QAAQ,CAACyC,kBAAkB,EAAnB,CAAR;AACD,OAHD,MAGK;AACHzC,QAAAA,QAAQ,CAAC2C,kBAAkB,CAACtC,GAAG,CAACG,IAAJ,CAAS0B,OAAV,CAAnB,CAAR;AACD;AACF,KAVM,CAAP;AAWD,GAZD;AAaD;AAED,OAAO,SAASa,uBAAT,CAAiCC,OAAjC,EAA0CC,aAA1C,EAAyD;AAC9D,SAAO;AACLxD,IAAAA,IAAI,EAAEL,KAAK,CAAC8D,0BADP;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,aAAa,EAAbA;AAHK,GAAP;AAKD;AAED,OAAO,SAASE,eAAT,CAAyBC,MAAzB,EAAiCH,aAAjC,EAAgD;AACrD,SAAO,UAACjD,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAAC+C,uBAAuB,CAACK,MAAD,EAAQH,aAAR,CAAxB,CAAR;AACD,GAFD;AAGD;AAED,OAAO,SAASI,WAAT,GAAuD;AAAA,MAAlCL,OAAkC,uEAA1B,IAA0B;AAAA,MAApBC,aAAoB,uEAAN,IAAM;;AAC5D,MAAGD,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,WAA1C,EAAsD;AACpDA,IAAAA,OAAO,GAAG,MAAV;AACD;;AACD,MAAGC,aAAa,KAAK,IAAlB,IAA0B,OAAOA,aAAP,KAAyB,WAAtD,EAAkE;AAChEA,IAAAA,aAAa,GAAG,EAAhB;AACD;;AACD,SAAO,UAACjD,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAAC+C,uBAAuB,CAACC,OAAD,EAASC,aAAT,CAAxB,CAAR;AACD,GAFD;AAGD","sourcesContent":["import * as types from '../constants/ActionTypes'\nimport request from 'superagent'\n\nconst API_URL = 'https://api.themoviedb.org/3/'\nconst API_KEY = '5934c9098581e262e81b72718dbc9b0a'\n\nfunction getMoviesFailure(){\n  return {type: types.MOVIES_FAILURE}\n}\n\nfunction getMoviesSuccess(movies){\n  return {type: types.MOVIES_SUCCESS, movies}\n}\n\nexport function getMovies(page){\n  return dispatch => {\n    return request\n    .get(`${API_URL}movie/now_playing?api_key=${API_KEY}&region=ID&page=${page}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(getMoviesFailure())\n      }else{\n        dispatch(getMoviesSuccess(res.body))\n      }\n    })\n  }\n}\n\nfunction searchMoviesFailure(){\n  return {type: types.SEARCH_FAILURE}\n}\n\nfunction searchMoviesSuccess(id){\n  return {type: types.SEARCH_SUCCESS, id}\n}\n\nexport function searchMovies(id){\n  return dispatch => {\n    return request\n    .get(`${API_URL}find/${id}?api_key=${API_KEY}&language=en-US&external_source=imdb_id`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(searchMoviesFailure())\n      }else{\n        dispatch(searchMoviesSuccess(res.body))\n      }\n    })\n  }\n}\n\nfunction getMovieFailure(){\n  return {type: types.MOVIE_FAILURE}\n}\n\nfunction getMovieSuccess(movie){\n  return {type: types.MOVIE_SUCCESS, movie}\n}\n\nexport function getMovie(id){\n  return dispatch => {\n    return request\n    .get(`${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(getMovieFailure())\n      }else{\n        dispatch(getMovieSuccess(res.body))\n      }\n    })\n  }\n}\n\nfunction getCastsFailure(){\n  return {type: types.CASTS_FAILURE}\n}\n\nfunction getCastsSuccess(casts){\n  return {type: types.CASTS_SUCCESS, casts}\n}\n\nexport function getCasts(id){\n  return dispatch => {\n    return request\n    .get(`${API_URL}movie/${id}/credits?api_key=${API_KEY}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(getCastsFailure())\n      }else{\n        dispatch(getCastsSuccess(res.body.cast))\n      }\n    })\n  }\n}\n\nfunction getRecommendedFailure(){\n  return {type: types.RECOMMENDED_FAILURE}\n}\n\nfunction getRecommendedSuccess(recommended){\n  return {type: types.RECOMMENDED_SUCCESS, recommended}\n}\n\nexport function getRecommended(id){\n  return dispatch => {\n    return request\n    .get(`${API_URL}movie/${id}/recommendations?api_key=${API_KEY}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(getRecommendedFailure())\n      }else{\n        dispatch(getRecommendedSuccess(res.body.results))\n      }\n    })\n  }\n}\n\nfunction getRelatedFailure(){\n  return {type: types.RELATED_FAILURE}\n}\n\nfunction getRelatedSuccess(related){\n  return {type: types.RELATED_SUCCESS, related}\n}\n\nexport function getRelated(id){\n  return dispatch => {\n    return request\n    .get(`${API_URL}movie/${id}/similar?api_key=${API_KEY}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(getRelatedFailure())\n      }else{\n        dispatch(getRelatedSuccess(res.body.results))\n      }\n    })\n  }\n}\n\nfunction getTrailersFailure(){\n  return {type: types.TRAILERS_FAILURE}\n}\n\nfunction getTrailersSuccess(trailer){\n  return {type: types.TRAILERS_SUCCESS, trailer}\n}\n\nexport function getTrailers(id){\n  return dispatch => {\n    return request\n    .get(`${API_URL}movie/${id}/videos?api_key=${API_KEY}&language=en-US`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      if(err){\n        console.error(err)\n        dispatch(getTrailersFailure())\n      }else{\n        dispatch(getTrailersSuccess(res.body.results))\n      }\n    })\n  }\n}\n\nexport function balanceFetchDataSuccess(balance, purchasedlist) {\n  return {\n    type: types.BALANCE_FETCH_DATA_SUCCESS,\n    balance,\n    purchasedlist\n  };\n}\n\nexport function balancePurchase(remain, purchasedlist) {\n  return (dispatch) => {\n    dispatch(balanceFetchDataSuccess(remain,purchasedlist));\n  }\n}\n\nexport function initBalance(balance=null, purchasedlist=null) {\n  if(balance === null || typeof balance === 'undefined'){\n    balance = 100000;\n  }\n  if(purchasedlist === null || typeof purchasedlist === 'undefined'){\n    purchasedlist = [];\n  }\n  return (dispatch) => {\n    dispatch(balanceFetchDataSuccess(balance,purchasedlist));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}