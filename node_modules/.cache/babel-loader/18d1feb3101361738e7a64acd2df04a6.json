{"ast":null,"code":"import * as types from '../constants/ActionTypes';\nimport request from 'superagent';\nvar API_URL = 'https://api.themoviedb.org/3/';\nvar API_KEY = '5934c9098581e262e81b72718dbc9b0a';\n\nfunction getMoviesFailure() {\n  return {\n    type: types.MOVIES_FAILURE\n  };\n}\n\nfunction getMoviesSuccess(movies) {\n  return {\n    type: types.MOVIES_SUCCESS,\n    movies: movies\n  };\n}\n\nexport function getMovies(page) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/now_playing?api_key=\").concat(API_KEY, \"&region=ID&page=\").concat(page)).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getMoviesFailure());\n      } else {\n        dispatch(getMoviesSuccess(res.body));\n      }\n    });\n  };\n}\n\nfunction getPopularMoviesFailure() {\n  return {\n    type: types.POPULAR_MOVIES_FAILURE\n  };\n}\n\nfunction getPopularMoviesSuccess(movies) {\n  return {\n    type: types.POPULAR_MOVIES_SUCCESS,\n    movies: movies\n  };\n}\n\nexport function getPopularMovies(page) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/popular?api_key=\").concat(API_KEY, \"&language=en-US&page=\").concat(page)).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getPopularMoviesFailure());\n      } else {\n        dispatch(getPopularMoviesSuccess(res.body));\n      }\n    });\n  };\n}\n\nfunction getMovieFailure() {\n  return {\n    type: types.MOVIE_FAILURE\n  };\n}\n\nfunction getMovieSuccess(movie) {\n  return {\n    type: types.MOVIE_SUCCESS,\n    movie: movie\n  };\n}\n\nexport function getMovie(id) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"?api_key=\").concat(API_KEY, \"&language=en-US\")).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getMovieFailure());\n      } else {\n        dispatch(getMovieSuccess(res.body));\n      }\n    });\n  };\n}\n\nfunction getCastsFailure() {\n  return {\n    type: types.CASTS_FAILURE\n  };\n}\n\nfunction getCastsSuccess(casts) {\n  return {\n    type: types.CASTS_SUCCESS,\n    casts: casts\n  };\n}\n\nexport function getCasts(id) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/credits?api_key=\").concat(API_KEY)).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getCastsFailure());\n      } else {\n        dispatch(getCastsSuccess(res.body.cast));\n      }\n    });\n  };\n}\n\nfunction getRecommendedFailure() {\n  return {\n    type: types.RECOMMENDED_FAILURE\n  };\n}\n\nfunction getRecommendedSuccess(recommended) {\n  return {\n    type: types.RECOMMENDED_SUCCESS,\n    recommended: recommended\n  };\n}\n\nexport function getRecommended(id) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/recommendations?api_key=\").concat(API_KEY)).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getRecommendedFailure());\n      } else {\n        dispatch(getRecommendedSuccess(res.body.results));\n      }\n    });\n  };\n}\n\nfunction getRelatedFailure() {\n  return {\n    type: types.RELATED_FAILURE\n  };\n}\n\nfunction getRelatedSuccess(related) {\n  return {\n    type: types.RELATED_SUCCESS,\n    related: related\n  };\n}\n\nexport function getRelated(id) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/similar?api_key=\").concat(API_KEY)).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getRelatedFailure());\n      } else {\n        dispatch(getRelatedSuccess(res.body.results));\n      }\n    });\n  };\n}\n\nfunction getTrailersFailure() {\n  return {\n    type: types.TRAILERS_FAILURE\n  };\n}\n\nfunction getTrailersSuccess(trailer) {\n  return {\n    type: types.TRAILERS_SUCCESS,\n    trailer: trailer\n  };\n}\n\nexport function getTrailers(id) {\n  return function (dispatch) {\n    dispatch(movieIsLoading(true));\n    return request.get(\"\".concat(API_URL, \"movie/\").concat(id, \"/videos?api_key=\").concat(API_KEY, \"&language=en-US\")).set('Accept', 'application/json').end(function (err, res) {\n      dispatch(movieIsLoading(false));\n\n      if (err) {\n        console.error(err);\n        dispatch(getTrailersFailure());\n      } else {\n        dispatch(getTrailersSuccess(res.body.results));\n      }\n    });\n  };\n}\nexport function balanceFetchDataSuccess(balance, purchasedlist) {\n  return {\n    type: types.BALANCE_FETCH_DATA_SUCCESS,\n    balance: balance,\n    purchasedlist: purchasedlist\n  };\n}\nexport function balancePurchase(remain, purchasedlist) {\n  return function (dispatch) {\n    dispatch(balanceFetchDataSuccess(remain, purchasedlist));\n  };\n}\nexport function initBalance() {\n  var balance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var purchasedlist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (balance === null || typeof balance === 'undefined') {\n    balance = 100000;\n  }\n\n  if (purchasedlist === null || typeof purchasedlist === 'undefined') {\n    purchasedlist = [];\n  }\n\n  return function (dispatch) {\n    dispatch(balanceFetchDataSuccess(balance, purchasedlist));\n  };\n}\nexport function movieIsLoading(loading) {\n  return {\n    type: types.MOVIE_IS_LOADING,\n    loading: loading\n  };\n}","map":{"version":3,"sources":["/home/bambang/Desktop/Mini-Project/src/actions/index.js"],"names":["types","request","API_URL","API_KEY","getMoviesFailure","type","MOVIES_FAILURE","getMoviesSuccess","movies","MOVIES_SUCCESS","getMovies","page","dispatch","movieIsLoading","get","set","end","err","res","console","error","body","getPopularMoviesFailure","POPULAR_MOVIES_FAILURE","getPopularMoviesSuccess","POPULAR_MOVIES_SUCCESS","getPopularMovies","getMovieFailure","MOVIE_FAILURE","getMovieSuccess","movie","MOVIE_SUCCESS","getMovie","id","getCastsFailure","CASTS_FAILURE","getCastsSuccess","casts","CASTS_SUCCESS","getCasts","cast","getRecommendedFailure","RECOMMENDED_FAILURE","getRecommendedSuccess","recommended","RECOMMENDED_SUCCESS","getRecommended","results","getRelatedFailure","RELATED_FAILURE","getRelatedSuccess","related","RELATED_SUCCESS","getRelated","getTrailersFailure","TRAILERS_FAILURE","getTrailersSuccess","trailer","TRAILERS_SUCCESS","getTrailers","balanceFetchDataSuccess","balance","purchasedlist","BALANCE_FETCH_DATA_SUCCESS","balancePurchase","remain","initBalance","loading","MOVIE_IS_LOADING"],"mappings":"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","sourcesContent":["import * as types from '../constants/ActionTypes'\nimport request from 'superagent'\n\nconst API_URL = 'https://api.themoviedb.org/3/'\nconst API_KEY = '5934c9098581e262e81b72718dbc9b0a'\n\nfunction getMoviesFailure(){\n  return {type: types.MOVIES_FAILURE}\n}\n\nfunction getMoviesSuccess(movies){\n  return {type: types.MOVIES_SUCCESS, movies}\n}\n\nexport function getMovies(page){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/now_playing?api_key=${API_KEY}&region=ID&page=${page}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getMoviesFailure())\n      }else{\n        dispatch(getMoviesSuccess(res.body))\n      }\n    })\n  }\n}\n\nfunction getPopularMoviesFailure(){\n  return {type: types.POPULAR_MOVIES_FAILURE}\n}\n\nfunction getPopularMoviesSuccess(movies){\n  return {type: types.POPULAR_MOVIES_SUCCESS, movies}\n}\n\nexport function getPopularMovies(page){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getPopularMoviesFailure())\n      }else{\n        dispatch(getPopularMoviesSuccess(res.body))\n      }\n    })\n  }\n}\n\nfunction getMovieFailure(){\n  return {type: types.MOVIE_FAILURE}\n}\n\nfunction getMovieSuccess(movie){\n  return {type: types.MOVIE_SUCCESS, movie}\n}\n\nexport function getMovie(id){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getMovieFailure())\n      }else{\n        dispatch(getMovieSuccess(res.body))\n      }\n    })\n  }\n}\n\nfunction getCastsFailure(){\n  return {type: types.CASTS_FAILURE}\n}\n\nfunction getCastsSuccess(casts){\n  return {type: types.CASTS_SUCCESS, casts}\n}\n\nexport function getCasts(id){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/${id}/credits?api_key=${API_KEY}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getCastsFailure())\n      }else{\n        dispatch(getCastsSuccess(res.body.cast))\n      }\n    })\n  }\n}\n\nfunction getRecommendedFailure(){\n  return {type: types.RECOMMENDED_FAILURE}\n}\n\nfunction getRecommendedSuccess(recommended){\n  return {type: types.RECOMMENDED_SUCCESS, recommended}\n}\n\nexport function getRecommended(id){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/${id}/recommendations?api_key=${API_KEY}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getRecommendedFailure())\n      }else{\n        dispatch(getRecommendedSuccess(res.body.results))\n      }\n    })\n  }\n}\n\nfunction getRelatedFailure(){\n  return {type: types.RELATED_FAILURE}\n}\n\nfunction getRelatedSuccess(related){\n  return {type: types.RELATED_SUCCESS, related}\n}\n\nexport function getRelated(id){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/${id}/similar?api_key=${API_KEY}`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getRelatedFailure())\n      }else{\n        dispatch(getRelatedSuccess(res.body.results))\n      }\n    })\n  }\n}\n\nfunction getTrailersFailure(){\n  return {type: types.TRAILERS_FAILURE}\n}\n\nfunction getTrailersSuccess(trailer){\n  return {type: types.TRAILERS_SUCCESS, trailer}\n}\n\nexport function getTrailers(id){\n  return dispatch => {\n    dispatch(movieIsLoading(true))\n    return request\n    .get(`${API_URL}movie/${id}/videos?api_key=${API_KEY}&language=en-US`)\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      dispatch(movieIsLoading(false))\n      if(err){\n        console.error(err)\n        dispatch(getTrailersFailure())\n      }else{\n        dispatch(getTrailersSuccess(res.body.results))\n      }\n    })\n  }\n}\n\nexport function balanceFetchDataSuccess(balance, purchasedlist) {\n  return {type: types.BALANCE_FETCH_DATA_SUCCESS, balance, purchasedlist};\n}\n\nexport function balancePurchase(remain, purchasedlist) {\n  return (dispatch) => {\n    dispatch(balanceFetchDataSuccess(remain,purchasedlist));\n  }\n}\n\nexport function initBalance(balance=null, purchasedlist=null) {\n  if(balance === null || typeof balance === 'undefined'){\n    balance = 100000;\n  }\n  if(purchasedlist === null || typeof purchasedlist === 'undefined'){\n    purchasedlist = [];\n  }\n  return (dispatch) => {\n    dispatch(balanceFetchDataSuccess(balance,purchasedlist));\n  }\n}\n\nexport function movieIsLoading(loading) {\n  return {type: types.MOVIE_IS_LOADING, loading};\n}\n"]},"metadata":{},"sourceType":"module"}