{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', 'exports', 'react', 'prop-types'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, exports, require('react'), require('prop-types'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, mod.exports, global.React, global.propTypes);\n    global.TextTruncate = mod.exports;\n  }\n})(this, function (module, exports, _react, _propTypes) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _objectWithoutProperties(obj, keys) {\n    var target = {};\n\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n\n    return target;\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var TextTruncate = function (_Component) {\n    _inherits(TextTruncate, _Component);\n\n    function TextTruncate() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, TextTruncate);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextTruncate.__proto__ || Object.getPrototypeOf(TextTruncate)).call.apply(_ref, [this].concat(args))), _this), _this.onResize = function () {\n        if (_this.rafId) {\n          window.cancelAnimationFrame(_this.rafId);\n        }\n\n        _this.rafId = window.requestAnimationFrame(_this.update.bind(_this));\n      }, _this.onTruncated = function () {\n        typeof _this.props.onTruncated === 'function' && setTimeout(function () {\n          return _this.props.onTruncated();\n        }, 0);\n      }, _this.onCalculated = function () {\n        typeof _this.props.onCalculated === 'function' && setTimeout(function () {\n          return _this.props.onCalculated();\n        }, 0);\n      }, _this.update = function () {\n        var style = window.getComputedStyle(_this.scope);\n        var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family'], style['letter-spacing']].join(' ');\n        _this.canvas.font = font;\n\n        _this.forceUpdate();\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(TextTruncate, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        var canvas = document.createElement('canvas');\n        var docFragment = document.createDocumentFragment();\n        var style = window.getComputedStyle(this.scope);\n        var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family']].join(' ');\n        docFragment.appendChild(canvas);\n        this.canvas = canvas.getContext('2d');\n        this.canvas.font = font;\n        this.forceUpdate();\n        window.addEventListener('resize', this.onResize);\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize);\n\n        if (this.rafId) {\n          window.cancelAnimationFrame(this.rafId);\n        }\n      }\n    }, {\n      key: 'measureWidth',\n      value: function measureWidth(text) {\n        return Math.ceil(this.canvas.measureText(text).width);\n      }\n    }, {\n      key: 'getRenderText',\n      value: function getRenderText() {\n        var _props = this.props,\n            containerClassName = _props.containerClassName,\n            element = _props.element,\n            line = _props.line,\n            onCalculated = _props.onCalculated,\n            onTruncated = _props.onTruncated,\n            text = _props.text,\n            textElement = _props.textElement,\n            textTruncateChild = _props.textTruncateChild,\n            truncateText = _props.truncateText,\n            maxCalculateTimes = _props.maxCalculateTimes,\n            props = _objectWithoutProperties(_props, ['containerClassName', 'element', 'line', 'onCalculated', 'onTruncated', 'text', 'textElement', 'textTruncateChild', 'truncateText', 'maxCalculateTimes']);\n\n        var scopeWidth = this.scope.getBoundingClientRect().width; // return if display:none\n\n        if (scopeWidth === 0) {\n          return null;\n        } // return if all of text can be displayed\n\n\n        if (scopeWidth >= this.measureWidth(text)) {\n          return (0, _react.createElement)(textElement, props, text);\n        }\n\n        var childText = '';\n\n        if (textTruncateChild && typeof textTruncateChild.type === 'string') {\n          var type = textTruncateChild.type;\n\n          if (type.indexOf('span') >= 0 || type.indexOf('a') >= 0) {\n            childText = textTruncateChild.props.children;\n          }\n        }\n\n        var currentPos = 1;\n        var maxTextLength = text.length;\n        var truncatedText = '';\n        var splitPos = 0;\n        var startPos = 0;\n        var displayLine = line;\n        var width = 0;\n        var lastIsEng = false;\n        var isPrevLineWithoutSpace = false;\n        var lastPos = 0;\n        var lastSpaceIndex = -1;\n        var ext = '';\n        var loopCnt = 0;\n\n        while (displayLine-- > 0) {\n          ext = displayLine ? '' : truncateText + (childText ? ' ' + childText : '');\n\n          while (currentPos <= maxTextLength) {\n            truncatedText = text.substr(startPos, currentPos);\n            width = this.measureWidth(truncatedText + ext);\n\n            if (width < scopeWidth) {\n              splitPos = text.indexOf(' ', currentPos + 1);\n\n              if (splitPos === -1) {\n                currentPos += 1;\n                lastIsEng = false;\n              } else {\n                lastIsEng = true;\n                currentPos = splitPos;\n              }\n            } else {\n              do {\n                if (loopCnt++ >= maxCalculateTimes) {\n                  break;\n                }\n\n                truncatedText = text.substr(startPos, currentPos);\n\n                if (!displayLine) {\n                  currentPos--;\n                }\n\n                if (truncatedText[truncatedText.length - 1] === ' ') {\n                  truncatedText = text.substr(startPos, currentPos - 1);\n                }\n\n                if (lastIsEng) {\n                  lastSpaceIndex = truncatedText.lastIndexOf(' ');\n\n                  if (lastSpaceIndex > -1) {\n                    currentPos = lastSpaceIndex;\n\n                    if (displayLine) {\n                      currentPos++;\n                    }\n\n                    truncatedText = text.substr(startPos, currentPos);\n                  } else {\n                    currentPos--;\n                    truncatedText = text.substr(startPos, currentPos);\n                  }\n                } else {\n                  currentPos--;\n                  truncatedText = text.substr(startPos, currentPos);\n                }\n\n                width = this.measureWidth(truncatedText + ext);\n              } while (width >= scopeWidth && truncatedText.length > 0);\n\n              startPos += currentPos;\n              break;\n            }\n          }\n\n          if (currentPos >= maxTextLength) {\n            startPos = maxTextLength;\n            break;\n          }\n\n          if (lastIsEng && !isPrevLineWithoutSpace && text.substr(lastPos, currentPos).indexOf(' ') === -1) {\n            isPrevLineWithoutSpace = text.substr(lastPos, currentPos).indexOf(' ') === -1;\n            displayLine--;\n          }\n\n          lastPos = currentPos + 1;\n        }\n\n        if (startPos === maxTextLength) {\n          return (0, _react.createElement)(textElement, props, text);\n        }\n\n        this.onTruncated();\n        return _react2.default.createElement('div', props, (0, _react.createElement)(textElement, props, text.substr(0, startPos) + truncateText + ' '), textTruncateChild);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _props2 = this.props,\n            element = _props2.element,\n            text = _props2.text,\n            _props2$style = _props2.style,\n            style = _props2$style === undefined ? {} : _props2$style,\n            containerClassName = _props2.containerClassName,\n            line = _props2.line,\n            onCalculated = _props2.onCalculated,\n            onTruncated = _props2.onTruncated,\n            textElement = _props2.textElement,\n            textTruncateChild = _props2.textTruncateChild,\n            truncateText = _props2.truncateText,\n            maxCalculateTimes = _props2.maxCalculateTimes,\n            props = _objectWithoutProperties(_props2, ['element', 'text', 'style', 'containerClassName', 'line', 'onCalculated', 'onTruncated', 'textElement', 'textTruncateChild', 'truncateText', 'maxCalculateTimes']);\n\n        var fontWeight = style.fontWeight,\n            fontStyle = style.fontStyle,\n            fontSize = style.fontSize,\n            fontFamily = style.fontFamily;\n        var renderText = this.scope && line ? this.getRenderText() : (0, _react.createElement)(textElement, props, text);\n        ;\n        var rootProps = {\n          ref: function ref(el) {\n            _this2.scope = el;\n          },\n          className: containerClassName,\n          style: {\n            overflow: 'hidden',\n            fontWeight: fontWeight,\n            fontStyle: fontStyle,\n            fontSize: fontSize,\n            fontFamily: fontFamily\n          }\n        };\n        this.scope && this.onCalculated();\n        return (0, _react.createElement)(element, rootProps, renderText);\n      }\n    }]);\n\n    return TextTruncate;\n  }(_react.Component);\n\n  TextTruncate.propTypes = {\n    containerClassName: _propTypes2.default.string,\n    element: _propTypes2.default.string,\n    line: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),\n    onCalculated: _propTypes2.default.func,\n    onTruncated: _propTypes2.default.func,\n    text: _propTypes2.default.string,\n    textElement: _propTypes2.default.node,\n    textTruncateChild: _propTypes2.default.node,\n    truncateText: _propTypes2.default.string,\n    maxCalculateTimes: _propTypes2.default.number\n  };\n  TextTruncate.defaultProps = {\n    element: 'div',\n    line: 1,\n    text: '',\n    textElement: 'span',\n    truncateText: '…',\n    maxCalculateTimes: 10\n  };\n  exports.default = TextTruncate;\n  ;\n  module.exports = exports['default'];\n});","map":null,"metadata":{},"sourceType":"script"}